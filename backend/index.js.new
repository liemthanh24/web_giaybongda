const express = require('express');
const mysql = require('mysql2');
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();
const path = require('path');

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Serve static files from the web root directory
app.use(express.static(path.join(__dirname, '..')));

// Serve files from src directory
app.use('/src', express.static(path.join(__dirname, '../src')));

// Serve static assets
app.use('/assets', express.static(path.join(__dirname, '../assets')));

// Database configuration
const dbConfig = {
    host: 'localhost',
    user: 'root',
    password: 'Liemdz2005',
    database: 'giaybongda'
};

// Database connection
const db = mysql.createConnection(dbConfig);

// Connect and handle reconnection
function connectDB() {
    db.connect((err) => {
        if (err) {
            console.error('Lỗi kết nối MySQL:', err);
            setTimeout(connectDB, 2000);
        } else {
            console.log('Kết nối MySQL thành công!');
        }
    });
}

// Xử lý khi mất kết nối
db.on('error', function(err) {
    console.error('Lỗi database:', err);
    if (err.code === 'PROTOCOL_CONNECTION_LOST') {
        connectDB();
    } else {
        throw err;
    }
});

// Initialize database connection
connectDB();

// Helper function để tạo mã sản phẩm
function generateProductCode(brand) {
    if (!brand) throw new Error('Brand is required');
    const prefix = brand.substring(0, 2).toUpperCase();
    const timestamp = Date.now().toString().slice(-6);
    return `${prefix}${timestamp}`;
}

// API: Lấy danh sách sản phẩm
app.get('/api/products', (req, res) => {
    const query = `
        SELECT 
            id,
            name,
            code,
            brand,
            price,
            stock,
            image,
            description,
            DATE_FORMAT(created_at, '%Y-%m-%d %H:%i:%s') as created_at
        FROM products
    `;
    
    db.query(query, (err, results) => {
        if (err) {
            console.error('Database error:', err);
            return res.status(500).json({ 
                error: 'Database query failed',
                details: err.message
            });
        }
        res.json(results);
    });
});

// API: Thêm sản phẩm mới
app.post('/api/products', (req, res) => {
    console.log('Received product data:', req.body);
    
    const { name, brand, price, image, description, stock } = req.body;
    
    // Validate input
    const errors = [];
    if (!name || name.trim() === '') errors.push('Tên sản phẩm là bắt buộc');
    if (!brand || brand.trim() === '') errors.push('Nhãn hiệu là bắt buộc');
    if (!price || isNaN(price) || price <= 0) errors.push('Giá phải lớn hơn 0');
    if (!stock || isNaN(stock) || stock < 0) errors.push('Số lượng không hợp lệ');
    if (!image || image.trim() === '') errors.push('Link ảnh là bắt buộc');
    if (!description || description.trim() === '') errors.push('Mô tả là bắt buộc');

    if (errors.length > 0) {
        return res.status(400).json({
            error: 'Missing required fields',
            details: errors
        });
    }

    // Kiểm tra sản phẩm trùng tên
    db.query('SELECT * FROM products WHERE LOWER(name) = LOWER(?)', [name.trim()], (err, results) => {
        if (err) {
            console.error('Error checking product:', err);
            return res.status(500).json({
                error: 'Database error',
                details: err.message
            });
        }

        if (results && results.length > 0) {
            return res.status(400).json({
                error: 'Duplicate product',
                details: 'A product with this name already exists'
            });
        }

        // Generate product code
        const code = generateProductCode(brand);
        
        const productData = {
            name: name.trim(),
            code: code,
            brand: brand.trim(),
            price: parseInt(price),
            image: image.trim(),
            description: description.trim(),
            stock: parseInt(stock),
            created_at: new Date()
        };

        // Log product data before insertion
        console.log('Product data to insert:', productData);

        // Insert new product
        db.query('INSERT INTO products SET ?', productData, (err, insertResult) => {
            if (err) {
                console.error('Error inserting product:', err);
                return res.status(500).json({
                    error: 'Failed to insert product',
                    details: err.message
                });
            }

            // Return the new product data
            const newProduct = {
                id: insertResult.insertId,
                ...productData,
                created_at: productData.created_at.toISOString()
            };
            
            res.status(200).json(newProduct);
        });
    });
});

// API: Cập nhật sản phẩm
app.put('/api/products/:id', (req, res) => {
    const { id } = req.params;
    const { name, brand, price, image, description, stock } = req.body;

    // Validate input
    const errors = [];
    if (!name || name.trim() === '') errors.push('Tên sản phẩm là bắt buộc');
    if (!brand || brand.trim() === '') errors.push('Nhãn hiệu là bắt buộc');
    if (!price || isNaN(price) || price <= 0) errors.push('Giá phải lớn hơn 0');
    if (!stock || isNaN(stock) || stock < 0) errors.push('Số lượng không hợp lệ');
    if (!image || image.trim() === '') errors.push('Link ảnh là bắt buộc');
    if (!description || description.trim() === '') errors.push('Mô tả là bắt buộc');

    if (errors.length > 0) {
        return res.status(400).json({
            error: 'Missing required fields',
            details: errors
        });
    }

    // Check if product exists
    db.query('SELECT * FROM products WHERE id = ?', [id], (err, results) => {
        if (err) {
            console.error('Error checking product:', err);
            return res.status(500).json({
                error: 'Database error',
                details: err.message
            });
        }

        if (!results || results.length === 0) {
            return res.status(404).json({
                error: 'Product not found',
                details: 'Product does not exist'
            });
        }

        // Update product
        const updateData = {
            name: name.trim(),
            brand: brand.trim(),
            price: parseInt(price),
            image: image.trim(),
            description: description.trim(),
            stock: parseInt(stock)
        };

        db.query('UPDATE products SET ? WHERE id = ?', [updateData, id], (err, result) => {
            if (err) {
                console.error('Error updating product:', err);
                return res.status(500).json({
                    error: 'Failed to update product',
                    details: err.message
                });
            }

            res.json({
                id,
                ...updateData,
                message: 'Product updated successfully'
            });
        });
    });
});

// API: Xóa sản phẩm
app.delete('/api/products/:id', (req, res) => {
    const { id } = req.params;
    console.log('Deleting product with ID:', id);

    // Kiểm tra sản phẩm tồn tại
    db.query('SELECT * FROM products WHERE id = ?', [id], (err, results) => {
        if (err) {
            console.error('Error checking product:', err);
            return res.status(500).json({
                error: 'Database error',
                details: err.message
            });
        }

        if (!results || results.length === 0) {
            return res.status(404).json({
                error: 'Product not found',
                details: 'Product does not exist'
            });
        }

        // Xóa sản phẩm
        db.query('DELETE FROM products WHERE id = ?', [id], (err, result) => {
            if (err) {
                console.error('Error deleting product:', err);
                return res.status(500).json({
                    error: 'Failed to delete product',
                    details: err.message
                });
            }

            console.log('Delete result:', result);
            res.json({
                success: true,
                message: 'Product deleted successfully'
            });
        });
    });
});

const port = 3001;
app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});
